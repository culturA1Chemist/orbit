 /* Variables */
$sizes: "xxs" var(--xxs),
  "xs" var(--xs),
  "s" var(--s),
  "m" var(--m),
  "l" var(--l),
  "xl" var(--xl),
  "xxl" var(--xxl);
  
$min: 0;
$max: 6;

$sectors:
  "offset-1" 0,
  "offset-2" 45,
  "offset-3" 90,
  "offset-4" 135,
  "offset-5" 180,
  "offset-6" 225,
  "offset-7" 270,
  "offset-8" 315;
$arcs:
  "arc-1" 45,
  "arc-2" 90,
  "arc-3" 135,
  "arc-4" 180,
  "arc-5" 225,
  "arc-6" 270,
  "arc-7" 315,
  "arc-8" 360;

$coords: "top" -90deg "0 0",
  "top-right" -45deg "0 0",
  "right" 0deg "0 0",
  "bottom" 90deg "0 0",
  "bottom-right" 45deg "0 0",
  "bottom-left" 135deg "0 0",
  "left" 180deg "0 0",
  "top-left" -135deg "0 0";

 /* Initial Reset */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
 /* Main elements */
.z-container {
  /* Layout vars */
  --arc: 360;
  --offset-angle: 0;
  --angle: 1;
  --radius: 100px;
  --item-number: 1;
  --radius-padding: 8px;
  
@for $i from $min through $max {
    --ring-#{$i}-factor: #{$i};
}

  /* Shape sizes */
  --xxs: 8px;
  --xs: 24px;
  --s: 44px;
  --m: 68px;
  --l: 110px;
  --xl: 180px;
  --xxl: 288px;
}

.z-container {
  display: grid;
  grid-template-columns: minmax(var(--radius), 1fr);
  grid-template-rows: minmax(var(--radius), 1fr);
  align-items: center;
  justify-items: center;
  border: 1px dashed black;
  align-content: center;
  justify-content: center;
}

.z-container > .ring-0 {
  width: 1px;
  height: 1px;
}

.ring-0 > .item {
  transform: rotate(calc(var(--angle) * 1deg));
}

.item {
  display: grid;
  background-color: rgba(255, 255, 255, 0.151);
  border: 1px solid black;
  align-items: center;
  justify-items: center;
  align-content: center;
  justify-content: center;
  grid-area: 1/1/1/1;
}

/* Shapes */
.item,
.item.circle {
  border-radius: 50%;
}

.item.box {
  border-radius: 0%;
}

.item.rounded {
  border-radius: 25%;
}

.item.transparent {
  border: none;
}

.item.a0 {
  --angle: 0;
}

.item.a45 {
  --angle: 45;
}

.item.a90 {
  --angle: 90;
}

.item.a135 {
  --angle: 135;
}

div[class^="ring"] {
  display: grid;
  border-radius: 50%;
  border: 1px dashed rgba(155, 155, 155, 0.5);
  align-items: center;
  justify-items: center;
  align-content: center;
  justify-content: center;
  grid-area: 1/1/1/1;
}

.label {
  display: block;
  border: 1px solid red;
  border-radius: 50;
  width: 4px;
  height: 4px;
}

  @each $size,
  $var in $sizes {
    @each $coord, $pos, $to in $coords {
      .item.#{$size} > .label.#{$coord} {
      transform: rotate(#{$pos}) translate(calc(#{$var} / 1.8), 0);
      }
      .label.#{$coord} > .label__text {
        transform-origin: #{$to};
        transform: translate(calc(40px), 0) rotate(calc(#{$pos} * -1));
      }
    }
  }

.label__conector {
  transform-origin: 0 0;
  border: transparent;
  border-top: 1px solid red;
  width: 40px;
}
.label__text {
  display: grid;
  border: 1px solid black;
  align-items: center;
  justify-items: center;
  align-content: center;
  justify-content: center;
  grid-area: 1/1/1/1;
  border-color: red;
  width: 50px;
  height: 20px;
  color: red;
}

@each $coord, $pos in $coords {
  .label__text {
    transform: translate(calc(40px), 0) rotate(calc(#{$pos} * -1));
  }
}

 
@each $size,
$var in $sizes {
  .item.#{$size} {
    width: $var;
    height: $var;
  }
}

@for $i from $min + 1 through $max {
  .z-container>.ring-#{$i} {
    width: calc(var(--radius) * 2 * var(--ring-#{$i}-factor));
    height: calc(var(--radius) * 2 * var(--ring-#{$i}-factor));
  }
}
@for $i from $min through $max {
  .item:nth-child(#{$i}) {
    --item-number:#{$i};
  }
}
@for $i from $min through $max {
  @each $sector,
  $angle in $sectors {
    .ring-#{$i}.#{$sector} {
      --offset-angle: #{$angle};
    }
  }
}
@for $i from $min through $max {
  @each $arc,
  $value in $arcs {
    .ring-#{$i}.#{$arc} {
      --arc: #{$value};
    }
  }
}
@for $i from $min through $max {
  .items-#{$i}>.item {
    --angle: calc((var(--offset-angle) + var(--arc)) / #{$i});
  }
}

@for $i from $min + 1 through $max {
  .z-container>.ring-#{$i}>.item {
    transform: rotate(calc(var(--angle) * var(--item-number) * 1deg)) translate(calc(var(--radius) * #{$i}), 0) rotate(calc(var(--angle) * var(--item-number) * 1deg * -1));
  }

  .z-container>.ring-#{$i}>.item.stationary {
    transform: rotate(calc(var(--angle) * var(--item-number) * 1deg)) translate(calc(var(--radius) * #{$i}), 0);
  }
}
@for $i from $min through $max {
  @each $size,
  $var in $sizes {
    .item.#{$size}>.ring-#{$i} {
      width: calc(#{$var} * var(--ring-#{$i}-factor));
      height: calc(#{$var} * var(--ring-#{$i}-factor));
    }

    .item.#{$size}>.ring-#{$i}>.item {
      --x: calc(#{$var} / 2 * var(--ring-#{$i}-factor));
      transform: rotate(calc(var(--angle) * var(--item-number) * 1deg)) translate(var(--x), 0) rotate(calc(var(--angle) * var(--item-number) * 1deg * -1));
    }

    .item.#{$size}>.ring-#{$i}>.item.stationary {
      --x: calc(#{$var}/ 2 * var(--ring-#{$i}-factor));
      transform: rotate(calc(var(--angle) * var(--item-number) * 1deg)) translate(var(--x), 0);
    }
  }
}