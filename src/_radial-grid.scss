@use "./mixins" as *;
@use "./variables" as *;

 /* Initial Reset */
 * {
   box-sizing: border-box;
   margin: 0;
   padding: 0;
 }

 /* Main elements */
 .z-container {
   /* Layout vars */
   --arc: 360;
   --offset-angle: 0;
   --direction: 1;
   --angle: 1;
   --radius: 50px;
   --item-number: 1;
   --radius-padding: 8px;

   @for $i from $min-rings through $max-rings {
     --radius-#{$i}: var(--radius) * #{$i};
   }

   /* Shape sizes */
   --xxs: 8px;
   --xs: 24px;
   --s: 44px;
   --m: 68px;
   --l: 110px;
   --xl: 180px;
   --xxl: 288px;

  /* Color */
  --transparent: transparent;
  --white: white;
  --black: black;

   /* width connector */
   --connector-width: 40px;
   --label-width: 50px;

   /* svg */
   --val: 0;
   --diam: 400;
   --stroke: 10;

 }

 @for $i from $min-items  through $max-items {
  @each $arc,
  $value in $arcs {
    .items-#{$i}.#{$arc}>.item {
      --angle: calc((var(--arc) / #{$i - 1})  * var(--direction));
    }
  }
}
 @for $i from $min-items  through $max-items {
  .items-#{$i}>.item {
     --angle: calc((var(--arc) / #{$i})  * var(--direction));
   }
 }



 @for $i from $min-rings through $max-rings {
  @each $size,
   $var in $sizes {
    @each $class in $align {
      $math: "";

       @if $class ==".upper" {
         $math: "+ (calc(#{$var} / 2))";
       }

       @if $class ==".lower" {
         $math: "- (calc(#{$var} / 2))";
       }

      .z-container>.ring-#{$i}> .item.#{$size}#{$class} {
        transform: rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle) - var(--angle)) * 1deg)) translate(calc(var(--radius-#{$i}) #{$math}), 0) rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle) - var(--angle)) * -1deg));
      }
 
      .z-container>.ring-#{$i}> .item.stationary.#{$size}#{$class} {
        transform:rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle) - var(--angle)) * 1deg)) translate(calc(var(--radius-#{$i}) #{$math}), 0);
      }
    }
   }
 
 }
 .core>.item {
   transform: rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle)) * 1deg));
 }
 @for $i from $min-rings through $max-rings {

   @each $size,
   $var in $sizes {
     .item.#{$size}>.ring-#{$i} {
       width: calc(#{$var} * #{$i});
       height: calc(#{$var} * #{$i});
     }

     @each $class in $align {
       $math: "";

       @if $class ==".upper" {
         $math: "+ (calc(#{$var} / 4))";
       }

       @if $class ==".lower" {
         $math: "- (calc(#{$var} / 4))";
       }

       .item.#{$size}>.ring-#{$i}>.item#{$class} {
         --x: calc((#{$var} / 2 * #{$i}) #{$math});
         transform: rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle) - var(--angle)) * 1deg)) translate(var(--x), 0) rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle) - var(--angle)) * -1deg));
       }

       .item.#{$size}>.ring-#{$i}> .item.stationary#{$class}  {
         --x: calc((#{$var} / 2 * #{$i}) #{$math});
         transform: rotate(calc((var(--angle) * var(--item-number) + var(--offset-angle) - var(--angle)) * 1deg)) translate(var(--x), 0);
       }
     }
   }
 }

 