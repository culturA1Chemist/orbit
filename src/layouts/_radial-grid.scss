@use '../utilities/sass-variables' as *;

@each $arc, $value in $arcs {
 .#{$arc} > .item, .#{$arc} > .arc {
    --arc: #{$value};
  }
}
@each $sector, $angle in $sectors {
  .#{$sector} > .item,  .#{$sector} > .arc {
    --offset-angle: #{$angle};
  }
}
.ccw {
  --direction: -1;
}
@for $i from $min-items through $max-items {
  .items-#{$i} > .item, .items-#{$i} > .arc {
    --angle: calc((var(--arc) / #{$i}) * var(--direction));
  }
}
@for $i from $min-items through $max-items {
  @each $arc, $value in $arcs {
    .items-#{$i}.#{$arc}> .item {
      --angle: calc((var(--arc) / #{$i - 1}) * var(--direction));
    }
   }
}


@for $i from $min-rings through $max-rings {
  $resta: 1;
  @if $i == 1 {
    $resta: 0;
  }
  @each $size, $var in $sizes {
    .z-container > .ring-#{$i} > .item.#{$size} {
      --x: calc(var(--radius-#{$i}));
    }
    @each $class in $align {
      $math: '';
      $translate: '';

      @if $class == '.upper' {
        $math: '+ (calc(#{$var} / 2))';
        $translate: 'translate(-55px, 55px)';
      }

      @if $class == '.lower' {
        $math: '- (calc(#{$var} / 2))';
        $translate: 'translate(-8px, 8px)';
      }

      .z-container > .ring-#{$i} > .item.#{$size}#{$class} {
        --x: calc(var(--radius-#{$i}) #{$math});
      }
    }
  }

  .z-container > .ring-#{$i} > .arc {
    --length: calc(var(--radius-#{$i}) * 2);
  }

  .z-container > .ring-#{$i} > svg {
    --diam: calc(var(--radius-#{$i}) * 2);
  }
}

@for $i from $min-rings through $max-rings {
  @each $size, $var in $sizes {
    .item.#{$size} > .ring-#{$i} {
      --diam: calc(#{$var} * #{$i});
      --z-index: #{$max-rings - $i};
    }
    .item.#{$size} > .ring-#{$i} > .item {
      --x: calc((#{$var} / 2 * #{$i}));
    }

    @each $class in $align {
      $math: '';
      @if $class == '.upper' {
        $math: '+ (calc(#{$var} / 4))';
      }

      @if $class == '.lower' {
        $math: '- (calc(#{$var} / 4))';
      }

      .item.#{$size} > .ring-#{$i} > .item#{$class} {
        --x: calc((#{$var} / 2 * #{$i}) #{$math});
      }
    }
    .item.#{$size} > .ring-#{$i} > svg {
      --diam: calc(#{$var} * #{$i});
    }
  }
}
//arcs nested
@for $i from $min-rings through $max-rings {
  @each $size, $var in $sizes {
    .item.#{$size} > .ring-#{$i} > .arc {
      --length: calc(#{$var} * #{$i});
    }
  }
}

@each $size, $var in $sizes {
  .item.#{$size} {
    --size: #{$var};
  }
}

@for $i from $min-rings through $max-rings {
  .z-container > .ring-#{$i} {
    --diam: calc(var(--radius-#{$i}) * 2);
    --z-index: #{$max-rings - $i};
  }
}

@for $i from $min-items through $max-items {
  .item:nth-child(#{$i}),
  .arc:nth-child(#{$i}) {
    --item-number: #{$i};
  }
}



