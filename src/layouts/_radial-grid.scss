@use '../utilities/sass-variables' as *;

@each $limit, $value in $limits {
  .#{$limit} > .item,
  .#{$limit} > .arc {
    --arc: #{$value};
  }
}
@each $offset, $angle in $offsets {
  .#{$offset} > .orbiter,
  .#{$offset} > .sector {
    --offset-angle: #{$angle};
  }
}

.ccw {
  --direction: -1;
}

@for $i from $min-orbiters through $max-orbiters {
  .orbit:has(.orbiter:nth-child(#{$i})),
  .orbit:has(.sector:nth-child(#{$i})) {
    --angle: calc((var(--arc) / #{$i}) * var(--direction));
  }
}
@for $i from $min-orbiters through $max-orbiters {
  @each $limit, $value in $limits {
    .orbit.#{$limit}:has(.orbiter:nth-child(#{$i})) {
      --arc: #{$value};
      --angle: calc((var(--arc) / #{$i - 1}) * var(--direction));
    }
  }
}
@for $i from $min-orbiters through $max-orbiters {
  @each $limit, $value in $limits {
    .orbit.#{$limit}:has(.sector:nth-child(#{$i})) {
      --arc: #{$value};
      --angle: calc((var(--arc) / #{$i}) * var(--direction));
    }
  }
}

@for $i from $min-orbits through $max-orbits {
  $resta: 1;
  @if $i == 1 {
    $resta: 0;
  }
  @each $size, $var in $sizes {
    .docker > .orbit:nth-child(#{$i}) > .orbiter.#{$size} {
      --x: calc(var(--radius-#{$i}));
    }
    @each $class in $align {
      $math: '';
      $translate: '';

      @if $class == '.upper' {
        $math: '+ (calc(#{$var} / 2))';
        $translate: 'translate(-55px, 55px)';
      }

      @if $class == '.lower' {
        $math: '- (calc(#{$var} / 2))';
        $translate: 'translate(-8px, 8px)';
      }

      .docker > .orbit:nth-child(#{$i}) > .orbiter.#{$size}#{$class} {
        --x: calc(var(--radius-#{$i}) #{$math});
      }
    }
  }

  .docker > .orbit:nth-child(#{$i}) > .sector {
    --length: calc(var(--radius-#{$i}) * 2);
    --current-orbit: #{$i};
    --max-orbits: #{$max-orbits};
  }

  .docker > .orbit:nth-child(#{$i}) > svg {
    --diam: calc(var(--radius-#{$i}) * 2);
  }
}

@for $i from $min-orbits through $max-orbits {
  @each $size, $var in $sizes {
    .orbiter.#{$size} > .orbit:nth-child(#{$i}) {
      --diam: calc(#{$var} * #{$i});
      --z-index: #{$max-orbits - $i};
    }
    .orbiter.#{$size} > .orbit:nth-child(#{$i}) > .orbiter {
      --x: calc((#{$var} / 2 * #{$i}));
    }

    @each $class in $align {
      $math: '';
      @if $class == '.upper' {
        $math: '+ (calc(#{$var} / 4))';
      }

      @if $class == '.lower' {
        $math: '- (calc(#{$var} / 4))';
      }

      .orbiter.#{$size} > .orbit:nth-child(#{$i}) > .orbiter#{$class} {
        --x: calc((#{$var} / 2 * #{$i}) #{$math});
      }
    }
    .orbiter.#{$size} > .orbit:nth-child(#{$i}) > svg {
      --diam: calc(#{$var} * #{$i});
    }
  }
}
//sectors nested
@for $i from $min-orbits through $max-orbits {
  @each $size, $var in $sizes {
    .orbiter.#{$size} > .orbit:nth-child(#{$i}) > .sector {
      --length: calc(#{$var} * #{$i});
      --current-orbit: #{$i};
      --max-orbits: #{$max-orbits};
    }
  }
}

@each $size, $var in $sizes {
  .orbiter.#{$size} {
    --size: #{$var};
  }
}

@for $i from $min-orbits through $max-orbits {
  .docker > .orbit:nth-child(#{$i}) {
    --diam: calc(var(--radius-#{$i}) * 2);
    --z-index: #{$max-orbits - $i};
  }
}

@for $i from $min-orbiters through $max-orbiters {
  .orbiter:nth-child(#{$i}),
  .sector:nth-child(#{$i}) {
    --orbiter-number: #{$i};
  }
}

