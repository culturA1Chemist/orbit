@charset "UTF-8";
/* Basic reset for each Orbit container */
.o-container * {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  border-width: 0;
  border-style: solid;
  border-color: rgb(0, 0, 0);
}

/* Check Firefox has() support */
@supports not selector(:has(a)) {
  .o-container {
    border: 5px solid red !important;
    text-shadow: 0 0 2px red;
    margin: 10px;
  }
  .o-container .o-orbit, .o-container .o-core, .o-container .o-sector {
    display: none;
  }
  .o-container::before {
    content: "⚠️ Orbit is not yet supported by 🦊 Firefox (until v.120)";
    text-shadow: 0 0 2px red;
    font-size: 18px;
    background-color: yellow;
    padding: 10px;
    text-align: center;
  }
  .o-container::after {
    content: "To experience Orbit, activate 'layout.css.has-selector.enabled' in 'about:config'";
    text-shadow: 0 0 2px rgba(253, 2, 2, 0.384);
    font-size: 12px;
    text-align: center;
  }
}
/* ======== Orbit - variables ========= */
/* 
All CSS Custom Vars are defined inside this container element 
This allows var isolation for Orbit. If you have mutiple o-containers
on same page, you can override some vars in specific class or style tags
Ej: .custom {
  --o-arc: 180;
}
*/
.o-container {
  /* Layout vars */
  --o-arc: var(--o-a360);
  --o-offset-angle: 0;
  --o-direction: 1;
  --o-angle: 1;
  --o-radius: 50px;
  --o-orbiter-number: 1;
  --o-radius-1: var(--o-radius) * 1;
  --o-radius-2: var(--o-radius) * 2;
  --o-radius-3: var(--o-radius) * 3;
  --o-radius-4: var(--o-radius) * 4;
  --o-radius-5: var(--o-radius) * 5;
  --o-radius-6: var(--o-radius) * 6;
  --o-orbit-size-1: calc(var(--o-radius) * 1 * 2);
  --o-orbit-size-2: calc(var(--o-radius) * 2 * 2);
  --o-orbit-size-3: calc(var(--o-radius) * 3 * 2);
  --o-orbit-size-4: calc(var(--o-radius) * 4 * 2);
  --o-orbit-size-5: calc(var(--o-radius) * 5 * 2);
  --o-orbit-size-6: calc(var(--o-radius) * 6 * 2);
  --o-ellipse-rate: 1;
  /* Shape sizes */
  --o-xxs: 8px;
  --o-xs: 24px;
  --o-sm: 44px;
  --o-md: 68px;
  --o-lg: 110px;
  --o-xl: 180px;
  --o-xxl: 288px;
  /* angles */
  --o-a0: 0;
  --o-a45: 45;
  --o-a90: 90;
  --o-a135: 135;
  --o-a180: 180;
  --o-a225: 225;
  --o-a270: 270;
  --o-a315: 315;
  --o-a360: 360;
  /* sector */
  --o-sector-gap: -1px;
  --o-width: 40px;
  /* width connector */
  --o-connector-width: 40px;
  --o-label-width: 50px;
  /* svg */
  --o-val: 0;
  --o-stroke: 10;
  --o-π: 3.14159265359;
}

/* container */
.o-container {
  display: grid;
  grid-template-columns: minmax(var(--o-radius), 1fr);
  grid-template-rows: minmax(var(--o-radius), 1fr);
  place-items: center;
}

.o-core {
  width: 0px;
  height: 0px;
  display: grid;
  border-radius: 50%;
  grid-area: 1/1/1/1;
  z-index: 6;
}

.o-core > .o-orbiter {
  transform: rotate(var(--o-rotate));
}

.o-orbit {
  --o-arc: var(--o-a360);
  --o-offset-angle: var(--o-a0);
  display: grid;
  border-radius: 50%;
  grid-area: 1/1/1/1;
  place-items: center;
  box-sizing: content-box;
  width: var(--o-diameter);
  height: calc(var(--o-diameter) / var(--o-ellipse-rate));
  z-index: var(--o-z-index);
}

.o-sector {
  --o-half: calc(var(--o-diameter) / 2);
  --o-quarter: calc(var(--o-half) / 2);
  --o-semi: calc(var(--o-angle) / 2 * 1deg);
  --o-gap: var(--o-sector-gap);
  --o-diameter-percent: calc(
    var(--o-half) + (var(--o-gap) * (var(--o-current-orbit) / var(--o-max-orbits))) - var(--o-half) * tan(var(--o-semi))
  );
  --o-width: 49px;
  --o-rotate: calc(
    (var(--o-angle) * var(--o-orbiter-number) + var(--o-offset-angle) - (var(--o-angle) / 2)) * 1deg
  );
  display: grid;
  grid-area: 1/1/1/1;
  height: var(--o-diameter);
  width: var(--o-half);
  border: var(--o-width) solid;
  border-left: none;
  border-radius: 0% 100% 100% 0%/100% 51% 51% 0%;
  box-sizing: border-box;
  clip-path: polygon(0 50%, 100% calc(100% - var(--o-diameter-percent)), 100% 100%, 100% 0, 100% var(--o-diameter-percent));
  transform: rotate(var(--o-rotate)) translate(var(--o-quarter), 0);
}

/*
<span style="
    position: absolute;
    top: 50%;
    left: 50%;
    transform:translate(-50%, -50%);
    rotate: calc(var(--o-rotate) * -1 (queda horizontal) * 45 (queda stationary) * 90(queda tipo rayo bici) );
">play</span>

*/
.o-orbiter {
  --o-size: var(--o-m);
  --o-rotation-angle: calc(
    var(--o-angle) * var(--o-orbiter-number) + var(--o-offset-angle) - var(--o-angle)
  );
  --o-rotate: calc(var(--o-rotation-angle) * 1deg);
  --o-rotate-invert: calc(var(--o-rotation-angle) * -1deg);
  display: grid;
  grid-area: 1/1/1/1;
  place-content: center;
  width: var(--o-size);
  height: var(--o-size);
  border-radius: 50%;
  transform: translate(calc(var(--o-x-coords) * cos(var(--o-rotate))), calc(var(--o-x-coords) / var(--o-ellipse-rate) * sin(var(--o-rotate))));
}

.o-orbiter.o-stationary {
  transform: translate(calc(var(--o-x-coords) * cos(var(--o-rotate))), calc(var(--o-x-coords) / var(--o-ellipse-rate) * sin(var(--o-rotate)))) rotate(var(--o-rotate));
}

/* ========== Shapes ========= */
/*
 All shapes are based on orbiter element.
 Some shapes can be applied to orbit element but take into account that Zumer only works with 
 radial grid, so if you have a boexed orbit its child elements still will be placed
 using radial grid.
*/
.o-orbiter.o-circle {
  border-radius: 50% !important; /* Default shape */
}

.o-orbiter.o-line {
  transform-origin: 0 50% !important;
  height: 0;
  width: calc(var(--o-radius-3));
  border-radius: 0%;
  border: none;
  border-top: 1px dashed var(--o-dark);
}

.o-orbiter.o-box {
  border-radius: 0% !important;
}

.o-orbiter.o-rounded {
  border-radius: 25% !important;
}

/* TODO: add blob variants */
.o-orbiter.o-blob {
  border-radius: 30% 70% 70% 30%/30% 30% 70% 70% !important;
}

.o-orbiter.o-transparent {
  border: none !important;
  background-color: var(--o-transparent) !important;
}

/* element structure */
.o-label {
  display: block;
  border: 1px solid;
  border-radius: 50%;
  width: 4px;
  height: 4px;
  --o-x-coords: calc(var(--o-size) / 1.8);
}

.o-label::before {
  content: "";
  display: block;
  border-bottom: 1px solid;
  width: var(--o-connector-width);
  height: 1px;
}

/* Set size variable for each orbiter */
.o-orbiter.o-xxs > .o-label {
  --o-size: var(--o-xxs);
}

.o-orbiter.o-xs > .o-label {
  --o-size: var(--o-xs);
}

.o-orbiter.o-sm > .o-label {
  --o-size: var(--o-sm);
}

.o-orbiter.o-md > .o-label {
  --o-size: var(--o-md);
}

.o-orbiter.o-lg > .o-label {
  --o-size: var(--o-lg);
}

.o-orbiter.o-xl > .o-label {
  --o-size: var(--o-xl);
}

.o-orbiter.o-xxl > .o-label {
  --o-size: var(--o-xxl);
}

/* Set size variable for each orbiter */
.o-label.o-offset-45 {
  --o-label-angle: calc(var(--o-a45) * 1deg);
  --o-label-box: 5px;
}

.o-label.o-offset-90 {
  --o-label-angle: calc(var(--o-a90) * 1deg);
  --o-label-box: 5px;
}

.o-label.o-offset-135 {
  --o-label-angle: calc(var(--o-a135) * 1deg);
  --o-label-box: 5px;
}

.o-label.o-offset-180 {
  --o-label-angle: calc(var(--o-a180) * 1deg);
  --o-label-box: -5px;
}

.o-label.o-offset-225 {
  --o-label-angle: calc(var(--o-a225) * 1deg);
  --o-label-box: 5px;
}

.o-label.o-offset-270 {
  --o-label-angle: calc(var(--o-a270) * 1deg);
  --o-label-box: 5px;
}

.o-label.o-offset-315 {
  --o-label-angle: calc(var(--o-a315) * 1deg);
  --o-label-box: 5px;
}

/* element radial setup*/
.o-orbiter > .o-label {
  transform: rotate(var(--o-label-angle)) translate(var(--o-x-coords), 0);
}

.o-svg > .o-svg-markers {
  --o-svg-markers: 12;
  --o-marker-width: 1px;
  --o-circumference: calc(var(--o-r) * var(--o-π) * 2);
  --o-dash: calc(var(--o-circumference) / var(--o-svg-markers) - var(--o-marker-width));
  --o-r: calc(var(--o-diameter) / 2);
  cx: var(--o-r);
  cy: var(--o-r);
  r: var(--o-r);
  stroke-width: calc(var(--o-radius) * 2);
  stroke-dasharray: var(--o-marker-width) var(--o-dash);
}

/* svg progress */
.o-svg > .o-svg-progress {
  --o-r: calc(var(--o-diameter) / 2);
  cx: var(--o-r);
  cy: var(--o-r);
  r: calc(var(--o-r));
  stroke-width: var(--o-stroke);
  stroke-dasharray: calc(var(--o-r) * var(--o-π) * 2);
  stroke-dashoffset: calc((100 - var(--o-val)) / 100 * var(--o-r) * var(--o-π) * 2);
}

/* progress */
.o-progress {
  --o-percentage: calc(var(--o-progress) * 3.6);
  display: grid;
  border-radius: 50%;
  grid-area: 1/1/1/1;
  place-items: center;
  width: 100%;
  height: 100%;
}

.o-progress + .o-orbiter {
  --o-orbiter-number: 2;
  --o-angle: calc(-90 + var(--o-progress) * 3.6);
}

/*  
 ====== Radial Grid =======
 Next the structure of a radial grid,
 specifying interactions between elements such as pod, orbits, orbiters, sectors, and SVG.
 It also manages the behavior of these elements when properties change, like sizes, arc-length limits, and alignment. 
*/
/* ====== Radial Grid - Core ======== */
.o-core > .o-orbiter:only-child {
  transform: translate(-50%, -50%);
}

/* ====== Radial Grid - Orbit ======== */
/* 
 Set diameter and z-index variables for each orbit
 having into account due orbit is nestable --o-diameter is affected by 
 parent orbiter size.
*/
.o-container > :nth-child(1 of .o-orbit) {
  --o-diameter: calc(var(--o-radius-1) * 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) {
  --o-diameter: var(--o-orbit-size-1);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) {
  --o-diameter: var(--o-orbit-size-2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) {
  --o-diameter: var(--o-orbit-size-3);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) {
  --o-diameter: var(--o-orbit-size-4);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) {
  --o-diameter: var(--o-orbit-size-5);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) {
  --o-diameter: var(--o-orbit-size-6);
  --o-z-index: 5;
}

.o-orbiter > :nth-child(1 of .o-orbit) {
  --o-diameter: calc(var(--o-size) * 1);
  --o-z-index: 5;
}

.o-container > :nth-child(2 of .o-orbit) {
  --o-diameter: calc(var(--o-radius-2) * 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) {
  --o-diameter: var(--o-orbit-size-1);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) {
  --o-diameter: var(--o-orbit-size-2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) {
  --o-diameter: var(--o-orbit-size-3);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) {
  --o-diameter: var(--o-orbit-size-4);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) {
  --o-diameter: var(--o-orbit-size-5);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) {
  --o-diameter: var(--o-orbit-size-6);
  --o-z-index: 4;
}

.o-orbiter > :nth-child(2 of .o-orbit) {
  --o-diameter: calc(var(--o-size) * 2);
  --o-z-index: 4;
}

.o-container > :nth-child(3 of .o-orbit) {
  --o-diameter: calc(var(--o-radius-3) * 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) {
  --o-diameter: var(--o-orbit-size-1);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) {
  --o-diameter: var(--o-orbit-size-2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) {
  --o-diameter: var(--o-orbit-size-3);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) {
  --o-diameter: var(--o-orbit-size-4);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) {
  --o-diameter: var(--o-orbit-size-5);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) {
  --o-diameter: var(--o-orbit-size-6);
  --o-z-index: 3;
}

.o-orbiter > :nth-child(3 of .o-orbit) {
  --o-diameter: calc(var(--o-size) * 3);
  --o-z-index: 3;
}

.o-container > :nth-child(4 of .o-orbit) {
  --o-diameter: calc(var(--o-radius-4) * 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) {
  --o-diameter: var(--o-orbit-size-1);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) {
  --o-diameter: var(--o-orbit-size-2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) {
  --o-diameter: var(--o-orbit-size-3);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) {
  --o-diameter: var(--o-orbit-size-4);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) {
  --o-diameter: var(--o-orbit-size-5);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) {
  --o-diameter: var(--o-orbit-size-6);
  --o-z-index: 2;
}

.o-orbiter > :nth-child(4 of .o-orbit) {
  --o-diameter: calc(var(--o-size) * 4);
  --o-z-index: 2;
}

.o-container > :nth-child(5 of .o-orbit) {
  --o-diameter: calc(var(--o-radius-5) * 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) {
  --o-diameter: var(--o-orbit-size-1);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) {
  --o-diameter: var(--o-orbit-size-2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) {
  --o-diameter: var(--o-orbit-size-3);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) {
  --o-diameter: var(--o-orbit-size-4);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) {
  --o-diameter: var(--o-orbit-size-5);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) {
  --o-diameter: var(--o-orbit-size-6);
  --o-z-index: 1;
}

.o-orbiter > :nth-child(5 of .o-orbit) {
  --o-diameter: calc(var(--o-size) * 5);
  --o-z-index: 1;
}

.o-container > :nth-child(6 of .o-orbit) {
  --o-diameter: calc(var(--o-radius-6) * 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) {
  --o-diameter: var(--o-orbit-size-1);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) {
  --o-diameter: var(--o-orbit-size-2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) {
  --o-diameter: var(--o-orbit-size-3);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) {
  --o-diameter: var(--o-orbit-size-4);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) {
  --o-diameter: var(--o-orbit-size-5);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) {
  --o-diameter: var(--o-orbit-size-6);
  --o-z-index: 0;
}

.o-orbiter > :nth-child(6 of .o-orbit) {
  --o-diameter: calc(var(--o-size) * 6);
  --o-z-index: 0;
}

/* ====== Radial Grid - Sub-orbit ======== */
/* 
 Set diameter and z-index variables for each suborbit.o-
*/
.o-container > :nth-child(1 of .o-orbit) > .o-orbit {
  --o-diameter: calc(var(--o-radius-1) * 2);
  --o-x-coords: calc(var(--o-radius-1));
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) > .o-orbit {
  --o-diameter: var(--o-orbit-size-1);
  --o-x-coords: calc( var(--o-orbit-size-1) / 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) > .o-orbit {
  --o-diameter: var(--o-orbit-size-2);
  --o-x-coords: calc( var(--o-orbit-size-2) / 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) > .o-orbit {
  --o-diameter: var(--o-orbit-size-3);
  --o-x-coords: calc( var(--o-orbit-size-3) / 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) > .o-orbit {
  --o-diameter: var(--o-orbit-size-4);
  --o-x-coords: calc( var(--o-orbit-size-4) / 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) > .o-orbit {
  --o-diameter: var(--o-orbit-size-5);
  --o-x-coords: calc( var(--o-orbit-size-5) / 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) > .o-orbit {
  --o-diameter: var(--o-orbit-size-6);
  --o-x-coords: calc( var(--o-orbit-size-6) / 2);
  --o-z-index: 5;
}

.o-container > :nth-child(1 of .o-orbit) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-radius-1) * 2);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(1 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-1) * 2);
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 );
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-1) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 );
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-2) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 );
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-3) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 );
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-4) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 );
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-5) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 );
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit.o-size-6) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(1) > .o-orbit {
  --o-diameter: calc(var(--o-size) * 1);
  --o-z-index: 5;
  --o-x-coords: calc(var(--o-radius-1));
  border: none !important;
}

.o-orbiter > .o-orbit:nth-child(1) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-size) * 1);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit) > .o-orbit {
  --o-diameter: calc(var(--o-radius-2) * 2);
  --o-x-coords: calc(var(--o-radius-2));
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) > .o-orbit {
  --o-diameter: var(--o-orbit-size-1);
  --o-x-coords: calc( var(--o-orbit-size-1) / 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) > .o-orbit {
  --o-diameter: var(--o-orbit-size-2);
  --o-x-coords: calc( var(--o-orbit-size-2) / 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) > .o-orbit {
  --o-diameter: var(--o-orbit-size-3);
  --o-x-coords: calc( var(--o-orbit-size-3) / 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) > .o-orbit {
  --o-diameter: var(--o-orbit-size-4);
  --o-x-coords: calc( var(--o-orbit-size-4) / 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) > .o-orbit {
  --o-diameter: var(--o-orbit-size-5);
  --o-x-coords: calc( var(--o-orbit-size-5) / 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) > .o-orbit {
  --o-diameter: var(--o-orbit-size-6);
  --o-x-coords: calc( var(--o-orbit-size-6) / 2);
  --o-z-index: 4;
}

.o-container > :nth-child(2 of .o-orbit) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-radius-2) * 2);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-2) * 2);
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 );
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-1) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 );
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-2) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 );
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-3) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 );
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-4) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 );
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-5) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 );
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit.o-size-6) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(2) > .o-orbit {
  --o-diameter: calc(var(--o-size) * 2);
  --o-z-index: 4;
  --o-x-coords: calc(var(--o-radius-2));
  border: none !important;
}

.o-orbiter > .o-orbit:nth-child(2) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-size) * 2);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit) > .o-orbit {
  --o-diameter: calc(var(--o-radius-3) * 2);
  --o-x-coords: calc(var(--o-radius-3));
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) > .o-orbit {
  --o-diameter: var(--o-orbit-size-1);
  --o-x-coords: calc( var(--o-orbit-size-1) / 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) > .o-orbit {
  --o-diameter: var(--o-orbit-size-2);
  --o-x-coords: calc( var(--o-orbit-size-2) / 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) > .o-orbit {
  --o-diameter: var(--o-orbit-size-3);
  --o-x-coords: calc( var(--o-orbit-size-3) / 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) > .o-orbit {
  --o-diameter: var(--o-orbit-size-4);
  --o-x-coords: calc( var(--o-orbit-size-4) / 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) > .o-orbit {
  --o-diameter: var(--o-orbit-size-5);
  --o-x-coords: calc( var(--o-orbit-size-5) / 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) > .o-orbit {
  --o-diameter: var(--o-orbit-size-6);
  --o-x-coords: calc( var(--o-orbit-size-6) / 2);
  --o-z-index: 3;
}

.o-container > :nth-child(3 of .o-orbit) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-radius-3) * 2);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-3) * 2);
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 );
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-1) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 );
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-2) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 );
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-3) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 );
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-4) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 );
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-5) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 );
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit.o-size-6) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(3) > .o-orbit {
  --o-diameter: calc(var(--o-size) * 3);
  --o-z-index: 3;
  --o-x-coords: calc(var(--o-radius-3));
  border: none !important;
}

.o-orbiter > .o-orbit:nth-child(3) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-size) * 3);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit) > .o-orbit {
  --o-diameter: calc(var(--o-radius-4) * 2);
  --o-x-coords: calc(var(--o-radius-4));
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) > .o-orbit {
  --o-diameter: var(--o-orbit-size-1);
  --o-x-coords: calc( var(--o-orbit-size-1) / 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) > .o-orbit {
  --o-diameter: var(--o-orbit-size-2);
  --o-x-coords: calc( var(--o-orbit-size-2) / 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) > .o-orbit {
  --o-diameter: var(--o-orbit-size-3);
  --o-x-coords: calc( var(--o-orbit-size-3) / 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) > .o-orbit {
  --o-diameter: var(--o-orbit-size-4);
  --o-x-coords: calc( var(--o-orbit-size-4) / 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) > .o-orbit {
  --o-diameter: var(--o-orbit-size-5);
  --o-x-coords: calc( var(--o-orbit-size-5) / 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) > .o-orbit {
  --o-diameter: var(--o-orbit-size-6);
  --o-x-coords: calc( var(--o-orbit-size-6) / 2);
  --o-z-index: 2;
}

.o-container > :nth-child(4 of .o-orbit) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-radius-4) * 2);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-4) * 2);
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 );
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-1) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 );
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-2) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 );
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-3) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 );
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-4) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 );
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-5) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 );
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit.o-size-6) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(4) > .o-orbit {
  --o-diameter: calc(var(--o-size) * 4);
  --o-z-index: 2;
  --o-x-coords: calc(var(--o-radius-4));
  border: none !important;
}

.o-orbiter > .o-orbit:nth-child(4) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-size) * 4);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit) > .o-orbit {
  --o-diameter: calc(var(--o-radius-5) * 2);
  --o-x-coords: calc(var(--o-radius-5));
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) > .o-orbit {
  --o-diameter: var(--o-orbit-size-1);
  --o-x-coords: calc( var(--o-orbit-size-1) / 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) > .o-orbit {
  --o-diameter: var(--o-orbit-size-2);
  --o-x-coords: calc( var(--o-orbit-size-2) / 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) > .o-orbit {
  --o-diameter: var(--o-orbit-size-3);
  --o-x-coords: calc( var(--o-orbit-size-3) / 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) > .o-orbit {
  --o-diameter: var(--o-orbit-size-4);
  --o-x-coords: calc( var(--o-orbit-size-4) / 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) > .o-orbit {
  --o-diameter: var(--o-orbit-size-5);
  --o-x-coords: calc( var(--o-orbit-size-5) / 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) > .o-orbit {
  --o-diameter: var(--o-orbit-size-6);
  --o-x-coords: calc( var(--o-orbit-size-6) / 2);
  --o-z-index: 1;
}

.o-container > :nth-child(5 of .o-orbit) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-radius-5) * 2);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-5) * 2);
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 );
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-1) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 );
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-2) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 );
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-3) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 );
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-4) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 );
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-5) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 );
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit.o-size-6) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(5) > .o-orbit {
  --o-diameter: calc(var(--o-size) * 5);
  --o-z-index: 1;
  --o-x-coords: calc(var(--o-radius-5));
  border: none !important;
}

.o-orbiter > .o-orbit:nth-child(5) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-size) * 5);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit) > .o-orbit {
  --o-diameter: calc(var(--o-radius-6) * 2);
  --o-x-coords: calc(var(--o-radius-6));
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) > .o-orbit {
  --o-diameter: var(--o-orbit-size-1);
  --o-x-coords: calc( var(--o-orbit-size-1) / 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) > .o-orbit {
  --o-diameter: var(--o-orbit-size-2);
  --o-x-coords: calc( var(--o-orbit-size-2) / 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) > .o-orbit {
  --o-diameter: var(--o-orbit-size-3);
  --o-x-coords: calc( var(--o-orbit-size-3) / 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) > .o-orbit {
  --o-diameter: var(--o-orbit-size-4);
  --o-x-coords: calc( var(--o-orbit-size-4) / 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) > .o-orbit {
  --o-diameter: var(--o-orbit-size-5);
  --o-x-coords: calc( var(--o-orbit-size-5) / 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) > .o-orbit {
  --o-diameter: var(--o-orbit-size-6);
  --o-x-coords: calc( var(--o-orbit-size-6) / 2);
  --o-z-index: 0;
}

.o-container > :nth-child(6 of .o-orbit) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-radius-6) * 2);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) > .o-orbit > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-6) * 2);
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) > .o-sector {
  --o-diameter: var(--o-orbit-size-1);
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) > .o-sector {
  --o-diameter: var(--o-orbit-size-2);
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) > .o-sector {
  --o-diameter: var(--o-orbit-size-3);
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) > .o-sector {
  --o-diameter: var(--o-orbit-size-4);
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) > .o-sector {
  --o-diameter: var(--o-orbit-size-5);
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) > .o-sector {
  --o-diameter: var(--o-orbit-size-6);
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 );
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-1) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-1) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 );
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-2) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-2) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 );
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-3) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-3) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 );
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-4) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-4) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 );
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-5) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-5) / 2 - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) > .o-orbiter {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 );
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) > .o-orbiter.o-upper {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit.o-size-6) > .o-orbiter.o-lower {
  --o-x-coords: calc( var(--o-orbit-size-6) / 2 - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(6) > .o-orbit {
  --o-diameter: calc(var(--o-size) * 6);
  --o-z-index: 0;
  --o-x-coords: calc(var(--o-radius-6));
  border: none !important;
}

.o-orbiter > .o-orbit:nth-child(6) > .o-orbit > .o-sector {
  --o-diameter: calc(var(--o-size) * 6);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

/* Set different offset angles.
 This allows orbit child elements to start at different points, overriding the default 0º.
 $offsets are defined in ./base/_variables.scss.
 For example, .offset-45 implies that orbiters or sectors start at a 45º angle.
*/
.o-orbit.o-offset-45, .o-core.o-offset-45 {
  --o-offset-angle: var(--o-a45); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-offset-90, .o-core.o-offset-90 {
  --o-offset-angle: var(--o-a90); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-offset-135, .o-core.o-offset-135 {
  --o-offset-angle: var(--o-a135); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-offset-180, .o-core.o-offset-180 {
  --o-offset-angle: var(--o-a180); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-offset-225, .o-core.o-offset-225 {
  --o-offset-angle: var(--o-a225); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-offset-270, .o-core.o-offset-270 {
  --o-offset-angle: var(--o-a270); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-offset-315, .o-core.o-offset-315 {
  --o-offset-angle: var(--o-a315); /* Set --o-offset-angle variable for a specific offset */
}

.o-orbit.o-limit-45, .o-core.o-limit-45 {
  --o-arc: var(--o-a45); /* Set lengyh variable for a specific arc limit */
}

.o-orbit.o-limit-90, .o-core.o-limit-90 {
  --o-arc: var(--o-a90); /* Set lengyh variable for a specific arc limit */
}

.o-orbit.o-limit-135, .o-core.o-limit-135 {
  --o-arc: var(--o-a135); /* Set lengyh variable for a specific arc limit */
}

.o-orbit.o-limit-180, .o-core.o-limit-180 {
  --o-arc: var(--o-a180); /* Set lengyh variable for a specific arc limit */
}

.o-orbit.o-limit-225, .o-core.o-limit-225 {
  --o-arc: var(--o-a225); /* Set lengyh variable for a specific arc limit */
}

.o-orbit.o-limit-270, .o-core.o-limit-270 {
  --o-arc: var(--o-a270); /* Set lengyh variable for a specific arc limit */
}

.o-orbit.o-limit-315, .o-core.o-limit-315 {
  --o-arc: var(--o-a315); /* Set lengyh variable for a specific arc limit */
}

/* Counter-clockwise direction
 By default, orbit child elements are arranged clockwise.
 Use this class to change this behavior.
*/
.o-orbit.o-ccw {
  --o-direction: -1; /* Set --o-direction variable to -1 for counter-clockwise direction */
}

/* ====== Radial Grid - Orbiters ======== */
/* Set size variable for each orbiter */
.o-orbiter.o-xxs {
  --o-size: var(--o-xxs);
}

.o-orbiter.o-xs {
  --o-size: var(--o-xs);
}

.o-orbiter.o-sm {
  --o-size: var(--o-sm);
}

.o-orbiter.o-md {
  --o-size: var(--o-md);
}

.o-orbiter.o-lg {
  --o-size: var(--o-lg);
}

.o-orbiter.o-xl {
  --o-size: var(--o-xl);
}

.o-orbiter.o-xxl {
  --o-size: var(--o-xxl);
}

/* Calculate and set arc-length and angle for each orbiter based on arc limits.
 Angle is calculated taking into account arc-length, number of orbit child elements and direction
 Note: using :nth-child() selector avoid to use parent classes to define number of child elements,
 but is not yet handled by Firefox, unless layout.css.has-selector.enabled flag  https://caniuse.com/css-has
*/
.o-orbit:has(> .o-orbiter:nth-child(1)) {
  --o-angle: calc((var(--o-arc) / 0) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(2)) {
  --o-angle: calc((var(--o-arc) / 1) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(3)) {
  --o-angle: calc((var(--o-arc) / 2) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(4)) {
  --o-angle: calc((var(--o-arc) / 3) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(5)) {
  --o-angle: calc((var(--o-arc) / 4) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(6)) {
  --o-angle: calc((var(--o-arc) / 5) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(7)) {
  --o-angle: calc((var(--o-arc) / 6) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(8)) {
  --o-angle: calc((var(--o-arc) / 7) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(9)) {
  --o-angle: calc((var(--o-arc) / 8) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(10)) {
  --o-angle: calc((var(--o-arc) / 9) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(11)) {
  --o-angle: calc((var(--o-arc) / 10) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(12)) {
  --o-angle: calc((var(--o-arc) / 11) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(13)) {
  --o-angle: calc((var(--o-arc) / 12) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(14)) {
  --o-angle: calc((var(--o-arc) / 13) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(15)) {
  --o-angle: calc((var(--o-arc) / 14) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(16)) {
  --o-angle: calc((var(--o-arc) / 15) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(17)) {
  --o-angle: calc((var(--o-arc) / 16) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(18)) {
  --o-angle: calc((var(--o-arc) / 17) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(19)) {
  --o-angle: calc((var(--o-arc) / 18) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(20)) {
  --o-angle: calc((var(--o-arc) / 19) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(21)) {
  --o-angle: calc((var(--o-arc) / 20) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(22)) {
  --o-angle: calc((var(--o-arc) / 21) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(23)) {
  --o-angle: calc((var(--o-arc) / 22) * var(--o-direction));
}

.o-orbit:has(> .o-orbiter:nth-child(24)) {
  --o-angle: calc((var(--o-arc) / 23) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(1)) {
  --o-angle: calc((var(--o-arc) / 1) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(2)) {
  --o-angle: calc((var(--o-arc) / 2) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(3)) {
  --o-angle: calc((var(--o-arc) / 3) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(4)) {
  --o-angle: calc((var(--o-arc) / 4) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(5)) {
  --o-angle: calc((var(--o-arc) / 5) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(6)) {
  --o-angle: calc((var(--o-arc) / 6) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(7)) {
  --o-angle: calc((var(--o-arc) / 7) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(8)) {
  --o-angle: calc((var(--o-arc) / 8) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(9)) {
  --o-angle: calc((var(--o-arc) / 9) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(10)) {
  --o-angle: calc((var(--o-arc) / 10) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(11)) {
  --o-angle: calc((var(--o-arc) / 11) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(12)) {
  --o-angle: calc((var(--o-arc) / 12) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(13)) {
  --o-angle: calc((var(--o-arc) / 13) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(14)) {
  --o-angle: calc((var(--o-arc) / 14) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(15)) {
  --o-angle: calc((var(--o-arc) / 15) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(16)) {
  --o-angle: calc((var(--o-arc) / 16) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(17)) {
  --o-angle: calc((var(--o-arc) / 17) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(18)) {
  --o-angle: calc((var(--o-arc) / 18) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(19)) {
  --o-angle: calc((var(--o-arc) / 19) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(20)) {
  --o-angle: calc((var(--o-arc) / 20) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(21)) {
  --o-angle: calc((var(--o-arc) / 21) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(22)) {
  --o-angle: calc((var(--o-arc) / 22) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(23)) {
  --o-angle: calc((var(--o-arc) / 23) * var(--o-direction));
}

.o-orbit:not([class*=limit-]):has(> .o-orbiter:nth-child(24)) {
  --o-angle: calc((var(--o-arc) / 24) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(1)) {
  --o-angle: calc((var(--o-arc) / 0) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(2)) {
  --o-angle: calc((var(--o-arc) / 1) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(3)) {
  --o-angle: calc((var(--o-arc) / 2) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(4)) {
  --o-angle: calc((var(--o-arc) / 3) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(5)) {
  --o-angle: calc((var(--o-arc) / 4) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(6)) {
  --o-angle: calc((var(--o-arc) / 5) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(7)) {
  --o-angle: calc((var(--o-arc) / 6) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(8)) {
  --o-angle: calc((var(--o-arc) / 7) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(9)) {
  --o-angle: calc((var(--o-arc) / 8) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(10)) {
  --o-angle: calc((var(--o-arc) / 9) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(11)) {
  --o-angle: calc((var(--o-arc) / 10) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(12)) {
  --o-angle: calc((var(--o-arc) / 11) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(13)) {
  --o-angle: calc((var(--o-arc) / 12) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(14)) {
  --o-angle: calc((var(--o-arc) / 13) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(15)) {
  --o-angle: calc((var(--o-arc) / 14) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(16)) {
  --o-angle: calc((var(--o-arc) / 15) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(17)) {
  --o-angle: calc((var(--o-arc) / 16) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(18)) {
  --o-angle: calc((var(--o-arc) / 17) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(19)) {
  --o-angle: calc((var(--o-arc) / 18) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(20)) {
  --o-angle: calc((var(--o-arc) / 19) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(21)) {
  --o-angle: calc((var(--o-arc) / 20) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(22)) {
  --o-angle: calc((var(--o-arc) / 21) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(23)) {
  --o-angle: calc((var(--o-arc) / 22) * var(--o-direction));
}

.o-orbit[class*=limit-]:has(> .o-orbiter:nth-child(24)) {
  --o-angle: calc((var(--o-arc) / 23) * var(--o-direction));
}

/* Set orbiter-number variable for each orbiter in each orbit */
.o-orbiter:nth-child(1) {
  --o-orbiter-number: 1;
}

.o-orbiter:nth-child(2) {
  --o-orbiter-number: 2;
}

.o-orbiter:nth-child(3) {
  --o-orbiter-number: 3;
}

.o-orbiter:nth-child(4) {
  --o-orbiter-number: 4;
}

.o-orbiter:nth-child(5) {
  --o-orbiter-number: 5;
}

.o-orbiter:nth-child(6) {
  --o-orbiter-number: 6;
}

.o-orbiter:nth-child(7) {
  --o-orbiter-number: 7;
}

.o-orbiter:nth-child(8) {
  --o-orbiter-number: 8;
}

.o-orbiter:nth-child(9) {
  --o-orbiter-number: 9;
}

.o-orbiter:nth-child(10) {
  --o-orbiter-number: 10;
}

.o-orbiter:nth-child(11) {
  --o-orbiter-number: 11;
}

.o-orbiter:nth-child(12) {
  --o-orbiter-number: 12;
}

.o-orbiter:nth-child(13) {
  --o-orbiter-number: 13;
}

.o-orbiter:nth-child(14) {
  --o-orbiter-number: 14;
}

.o-orbiter:nth-child(15) {
  --o-orbiter-number: 15;
}

.o-orbiter:nth-child(16) {
  --o-orbiter-number: 16;
}

.o-orbiter:nth-child(17) {
  --o-orbiter-number: 17;
}

.o-orbiter:nth-child(18) {
  --o-orbiter-number: 18;
}

.o-orbiter:nth-child(19) {
  --o-orbiter-number: 19;
}

.o-orbiter:nth-child(20) {
  --o-orbiter-number: 20;
}

.o-orbiter:nth-child(21) {
  --o-orbiter-number: 21;
}

.o-orbiter:nth-child(22) {
  --o-orbiter-number: 22;
}

.o-orbiter:nth-child(23) {
  --o-orbiter-number: 23;
}

.o-orbiter:nth-child(24) {
  --o-orbiter-number: 24;
}

/* Set x custom var for each orbiter
 This value is used to calculate its radius.
 Aligment options ares included.
*/
.o-container > :nth-child(1 of .o-orbit) > .o-orbiter {
  --o-x-coords: calc(var(--o-radius-1) );
}

.o-container > :nth-child(1 of .o-orbit) > .o-orbiter.o-upper {
  --o-x-coords: calc(var(--o-radius-1) + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(1 of .o-orbit) > .o-orbiter.o-lower {
  --o-x-coords: calc(var(--o-radius-1) - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit) > .o-orbiter {
  --o-x-coords: calc(var(--o-radius-2) );
}

.o-container > :nth-child(2 of .o-orbit) > .o-orbiter.o-upper {
  --o-x-coords: calc(var(--o-radius-2) + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(2 of .o-orbit) > .o-orbiter.o-lower {
  --o-x-coords: calc(var(--o-radius-2) - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit) > .o-orbiter {
  --o-x-coords: calc(var(--o-radius-3) );
}

.o-container > :nth-child(3 of .o-orbit) > .o-orbiter.o-upper {
  --o-x-coords: calc(var(--o-radius-3) + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(3 of .o-orbit) > .o-orbiter.o-lower {
  --o-x-coords: calc(var(--o-radius-3) - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit) > .o-orbiter {
  --o-x-coords: calc(var(--o-radius-4) );
}

.o-container > :nth-child(4 of .o-orbit) > .o-orbiter.o-upper {
  --o-x-coords: calc(var(--o-radius-4) + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(4 of .o-orbit) > .o-orbiter.o-lower {
  --o-x-coords: calc(var(--o-radius-4) - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit) > .o-orbiter {
  --o-x-coords: calc(var(--o-radius-5) );
}

.o-container > :nth-child(5 of .o-orbit) > .o-orbiter.o-upper {
  --o-x-coords: calc(var(--o-radius-5) + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(5 of .o-orbit) > .o-orbiter.o-lower {
  --o-x-coords: calc(var(--o-radius-5) - (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit) > .o-orbiter {
  --o-x-coords: calc(var(--o-radius-6) );
}

.o-container > :nth-child(6 of .o-orbit) > .o-orbiter.o-upper {
  --o-x-coords: calc(var(--o-radius-6) + (calc(var(--o-size) / 2)));
}

.o-container > :nth-child(6 of .o-orbit) > .o-orbiter.o-lower {
  --o-x-coords: calc(var(--o-radius-6) - (calc(var(--o-size) / 2)));
}

/* Set variables for each orbiter in each orbit based on size and alignment
 Accordng its diameter named sizes each orbiter has a radius to be elingned with its orbit.
 By deafult orbiter are aligned in the middle of it orbit, but it is possible
 to place it tangencialy upper or lower.
 Example: orbiter.upper
*/
.o-orbiter > .o-orbit:nth-child(1) > .o-orbiter, .o-orbit > .o-orbit:nth-child(1) > .o-orbiter {
  --o-x-coords: calc((var(--o-diameter) / 2) );
}

.o-orbiter > .o-orbit:nth-child(1) > .o-orbiter.o-upper, .o-orbit > .o-orbit:nth-child(1) > .o-orbiter.o-upper {
  --o-x-coords: calc((var(--o-diameter) / 2) + (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(1) > .o-orbiter.o-lower, .o-orbit > .o-orbit:nth-child(1) > .o-orbiter.o-lower {
  --o-x-coords: calc((var(--o-diameter) / 2) - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(2) > .o-orbiter, .o-orbit > .o-orbit:nth-child(2) > .o-orbiter {
  --o-x-coords: calc((var(--o-diameter) / 2) );
}

.o-orbiter > .o-orbit:nth-child(2) > .o-orbiter.o-upper, .o-orbit > .o-orbit:nth-child(2) > .o-orbiter.o-upper {
  --o-x-coords: calc((var(--o-diameter) / 2) + (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(2) > .o-orbiter.o-lower, .o-orbit > .o-orbit:nth-child(2) > .o-orbiter.o-lower {
  --o-x-coords: calc((var(--o-diameter) / 2) - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(3) > .o-orbiter, .o-orbit > .o-orbit:nth-child(3) > .o-orbiter {
  --o-x-coords: calc((var(--o-diameter) / 2) );
}

.o-orbiter > .o-orbit:nth-child(3) > .o-orbiter.o-upper, .o-orbit > .o-orbit:nth-child(3) > .o-orbiter.o-upper {
  --o-x-coords: calc((var(--o-diameter) / 2) + (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(3) > .o-orbiter.o-lower, .o-orbit > .o-orbit:nth-child(3) > .o-orbiter.o-lower {
  --o-x-coords: calc((var(--o-diameter) / 2) - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(4) > .o-orbiter, .o-orbit > .o-orbit:nth-child(4) > .o-orbiter {
  --o-x-coords: calc((var(--o-diameter) / 2) );
}

.o-orbiter > .o-orbit:nth-child(4) > .o-orbiter.o-upper, .o-orbit > .o-orbit:nth-child(4) > .o-orbiter.o-upper {
  --o-x-coords: calc((var(--o-diameter) / 2) + (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(4) > .o-orbiter.o-lower, .o-orbit > .o-orbit:nth-child(4) > .o-orbiter.o-lower {
  --o-x-coords: calc((var(--o-diameter) / 2) - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(5) > .o-orbiter, .o-orbit > .o-orbit:nth-child(5) > .o-orbiter {
  --o-x-coords: calc((var(--o-diameter) / 2) );
}

.o-orbiter > .o-orbit:nth-child(5) > .o-orbiter.o-upper, .o-orbit > .o-orbit:nth-child(5) > .o-orbiter.o-upper {
  --o-x-coords: calc((var(--o-diameter) / 2) + (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(5) > .o-orbiter.o-lower, .o-orbit > .o-orbit:nth-child(5) > .o-orbiter.o-lower {
  --o-x-coords: calc((var(--o-diameter) / 2) - (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(6) > .o-orbiter, .o-orbit > .o-orbit:nth-child(6) > .o-orbiter {
  --o-x-coords: calc((var(--o-diameter) / 2) );
}

.o-orbiter > .o-orbit:nth-child(6) > .o-orbiter.o-upper, .o-orbit > .o-orbit:nth-child(6) > .o-orbiter.o-upper {
  --o-x-coords: calc((var(--o-diameter) / 2) + (calc(var(--o-size) / 2)));
}

.o-orbiter > .o-orbit:nth-child(6) > .o-orbiter.o-lower, .o-orbit > .o-orbit:nth-child(6) > .o-orbiter.o-lower {
  --o-x-coords: calc((var(--o-diameter) / 2) - (calc(var(--o-size) / 2)));
}

/* ========= Radial Grid - Sectors ============= */
/* Set orbiter-number variable for each sector in each orbit */
.o-sector:nth-child(1) {
  --o-orbiter-number: 1;
}

.o-sector:nth-child(2) {
  --o-orbiter-number: 2;
}

.o-sector:nth-child(3) {
  --o-orbiter-number: 3;
}

.o-sector:nth-child(4) {
  --o-orbiter-number: 4;
}

.o-sector:nth-child(5) {
  --o-orbiter-number: 5;
}

.o-sector:nth-child(6) {
  --o-orbiter-number: 6;
}

.o-sector:nth-child(7) {
  --o-orbiter-number: 7;
}

.o-sector:nth-child(8) {
  --o-orbiter-number: 8;
}

.o-sector:nth-child(9) {
  --o-orbiter-number: 9;
}

.o-sector:nth-child(10) {
  --o-orbiter-number: 10;
}

.o-sector:nth-child(11) {
  --o-orbiter-number: 11;
}

.o-sector:nth-child(12) {
  --o-orbiter-number: 12;
}

.o-sector:nth-child(13) {
  --o-orbiter-number: 13;
}

.o-sector:nth-child(14) {
  --o-orbiter-number: 14;
}

.o-sector:nth-child(15) {
  --o-orbiter-number: 15;
}

.o-sector:nth-child(16) {
  --o-orbiter-number: 16;
}

.o-sector:nth-child(17) {
  --o-orbiter-number: 17;
}

.o-sector:nth-child(18) {
  --o-orbiter-number: 18;
}

.o-sector:nth-child(19) {
  --o-orbiter-number: 19;
}

.o-sector:nth-child(20) {
  --o-orbiter-number: 20;
}

.o-sector:nth-child(21) {
  --o-orbiter-number: 21;
}

.o-sector:nth-child(22) {
  --o-orbiter-number: 22;
}

.o-sector:nth-child(23) {
  --o-orbiter-number: 23;
}

.o-sector:nth-child(24) {
  --o-orbiter-number: 24;
}

/* Calculate and set angle for each orbiter and sector.
 Angle is calculated taking into account arc-length, number of orbit child elements and direction
 Note: using :nth-child() selector avoid to use parent classes to define number of child elements,
 but is not yet handled by Firefox, unless layout.css.has-selector.enabled flag  https://caniuse.com/css-has
*/
.o-orbit:has(> .o-sector:nth-child(1)) {
  --o-angle: calc((var(--o-arc) / 1) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(2)) {
  --o-angle: calc((var(--o-arc) / 2) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(3)) {
  --o-angle: calc((var(--o-arc) / 3) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(4)) {
  --o-angle: calc((var(--o-arc) / 4) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(5)) {
  --o-angle: calc((var(--o-arc) / 5) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(6)) {
  --o-angle: calc((var(--o-arc) / 6) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(7)) {
  --o-angle: calc((var(--o-arc) / 7) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(8)) {
  --o-angle: calc((var(--o-arc) / 8) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(9)) {
  --o-angle: calc((var(--o-arc) / 9) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(10)) {
  --o-angle: calc((var(--o-arc) / 10) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(11)) {
  --o-angle: calc((var(--o-arc) / 11) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(12)) {
  --o-angle: calc((var(--o-arc) / 12) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(13)) {
  --o-angle: calc((var(--o-arc) / 13) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(14)) {
  --o-angle: calc((var(--o-arc) / 14) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(15)) {
  --o-angle: calc((var(--o-arc) / 15) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(16)) {
  --o-angle: calc((var(--o-arc) / 16) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(17)) {
  --o-angle: calc((var(--o-arc) / 17) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(18)) {
  --o-angle: calc((var(--o-arc) / 18) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(19)) {
  --o-angle: calc((var(--o-arc) / 19) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(20)) {
  --o-angle: calc((var(--o-arc) / 20) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(21)) {
  --o-angle: calc((var(--o-arc) / 21) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(22)) {
  --o-angle: calc((var(--o-arc) / 22) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(23)) {
  --o-angle: calc((var(--o-arc) / 23) * var(--o-direction));
}

.o-orbit:has(> .o-sector:nth-child(24)) {
  --o-angle: calc((var(--o-arc) / 24) * var(--o-direction));
}

.o-container > :nth-child(1 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-1) * 2);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-orbiter > :nth-child(1 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-size) * 1);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 1;
  --o-max-orbits: 6;
}

.o-container > :nth-child(2 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-2) * 2);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-orbiter > :nth-child(2 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-size) * 2);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 2;
  --o-max-orbits: 6;
}

.o-container > :nth-child(3 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-3) * 2);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-orbiter > :nth-child(3 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-size) * 3);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 3;
  --o-max-orbits: 6;
}

.o-container > :nth-child(4 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-4) * 2);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-orbiter > :nth-child(4 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-size) * 4);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 4;
  --o-max-orbits: 6;
}

.o-container > :nth-child(5 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-5) * 2);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-orbiter > :nth-child(5 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-size) * 5);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 5;
  --o-max-orbits: 6;
}

.o-container > :nth-child(6 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-radius-6) * 2);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

.o-orbiter > :nth-child(6 of .o-orbit) > .o-sector {
  --o-diameter: calc(var(--o-size) * 6);
  --o-width: calc(var(--o-size) / 4);
  --o-current-orbit: 6;
  --o-max-orbits: 6;
}

/* ========= Radial Grid - SVG ============= */
.o-container > .o-orbit:nth-child(1) > svg {
  --o-diameter: calc(var(--o-radius-1) * 2);
}

.o-container > .o-orbit:nth-child(2) > svg {
  --o-diameter: calc(var(--o-radius-2) * 2);
}

.o-container > .o-orbit:nth-child(3) > svg {
  --o-diameter: calc(var(--o-radius-3) * 2);
}

.o-container > .o-orbit:nth-child(4) > svg {
  --o-diameter: calc(var(--o-radius-4) * 2);
}

.o-container > .o-orbit:nth-child(5) > svg {
  --o-diameter: calc(var(--o-radius-5) * 2);
}

.o-container > .o-orbit:nth-child(6) > svg {
  --o-diameter: calc(var(--o-radius-6) * 2);
}

/* Set variables for each orbiter in each orbit based on size and alignment
 Accordng its diameter named sizes each orbiter has a radius to be elingned with its orbit.
 By deafult orbiter are aligned in the middle of it orbit, but it is possible
 to place it tangencialy upper or lower.
 Example: orbiter.upper
*/
.o-orbiter > .o-orbit:nth-child(1) > svg {
  --o-diameter: calc(var(--o-size) * 1);
}

.o-orbiter > .o-orbit:nth-child(2) > svg {
  --o-diameter: calc(var(--o-size) * 2);
}

.o-orbiter > .o-orbit:nth-child(3) > svg {
  --o-diameter: calc(var(--o-size) * 3);
}

.o-orbiter > .o-orbit:nth-child(4) > svg {
  --o-diameter: calc(var(--o-size) * 4);
}

.o-orbiter > .o-orbit:nth-child(5) > svg {
  --o-diameter: calc(var(--o-size) * 5);
}

.o-orbiter > .o-orbit:nth-child(6) > svg {
  --o-diameter: calc(var(--o-size) * 6);
}

.orbiter > .o-content {
  padding: 5px;
  width: inherit;
  height: inherit;
  display: grid;
  border-radius: inherit;
  align-items: center;
  justify-items: center;
  align-content: center;
  justify-content: center;
  overflow: hidden;
  z-index: 10;
}

.o-sector > .o-content {
  display: grid;
  place-items: center right;
  color: white;
  width: var(--o-half);
  /* paddgin right para qeudar fuera de borde mas un espacio*/
  padding-right: calc(var(--o-width) + 10px);
  /* paddgin right para qeudar fuera de borde mas un espacio*/
  /*padding-right: 0px;*/
}

.o-sector > .o-content > span {
  /*queda mirando para afuera*/
  /* rotate: 270deg;*/
  /* queda mirando para adentro*/
  /*rotate: 90deg;*/
  /* queda siempre horizontal. default */
  rotate: calc(var(--o-rotate) * -1);
  /* sin rotate quedan perpendiculares al centro.*/
  /* rotate: 0deg;*/
}

.o-svg {
  border-radius: inherit;
  align-items: center;
  justify-items: center;
  align-content: center;
  justify-content: center;
  rotate: -90deg;
  width: calc(var(--o-diameter));
  height: calc(var(--o-diameter));
}

.o-label > .o-content {
  transform-origin: 0 0;
  border: 1px solid;
  border-radius: 4px;
  min-width: 100px;
  height: auto;
  --o-label-box: 5px;
  transform: translate(calc(var(--o-connector-width) - 5px), var(--o-label-box)) rotate(calc(var(--o-label-angle) * -1));
}

.o-orbit.o-filter-gooey {
  filter: url('data:image/svg+xml,    <svg xmlns="http://www.w3.org/2000/svg">    <filter id="fancy-goo">    <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />    <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9" result="goo" />    <feComposite in="SourceGraphic" in2="goo" operator="atop" />    </filter>    </svg>#fancy-goo');
}

/* Media Query for Mobile Devices */
@media (max-width: 480px) {
  .o-container {
    --o-radius: 50px;
  }
}
/* Media Query for low resolution Tablets, Ipads */
@media (min-width: 481px) and (max-width: 767px) {
  .o-container {
    --o-radius: 60px;
  }
}
/* Media Query for Tablets Ipads portrait mode */
@media (min-width: 768px) and (max-width: 1024px) {
  .o-container {
    --o-radius: 70px;
  }
}
/* Media Query for Laptops and Desktops */
@media (min-width: 1025px) and (max-width: 1280px) {
  .o-container {
    --o-radius: 80px;
  }
}
/* Media Query for Large screens */
@media (min-width: 1281px) {
  .o-container {
    --o-radius: 90px;
  }
}/*# sourceMappingURL=orbit-base.css.map */